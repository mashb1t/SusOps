susops() {
  # Defaults
  local ssh_host="${SUSOPS_SSH_HOST:-pi}"
  local workspace="${SUSOPS_WORKSPACE:-$HOME/.susops}"

  # Define file paths for storing ports, PIDs, and config
  local socks_portfile="$workspace/socks_port"
  local pac_portfile="$workspace/pac_port"
  local pacfile="$workspace/susops.pac"
  local socks_pidfile="$workspace/socks.pid"
  local pac_pidfile="$workspace/pac.pid"
  local reverse_conf="$workspace/reverse.conf"

  # Verbosity toggle for debugging
  local verbose=false

  stop_process() {
    local pidfile="$1" desc="$2" portfile="$3"
    if [[ -f "$pidfile" ]]; then
      local pid
      pid=$(<"$pidfile")
      kill "$pid" 2>/dev/null && echo "→ Stopped $desc (PID $pid)"
      rm -f "$pidfile" "$portfile"
    fi
  }

  # Ensure workspace directory structure exists
  mkdir -p "$workspace"

  # Parse global flags
  local args=()
  for arg in "$@"; do
    case "$arg" in
      -v|--verbose) verbose=true ;;
      *) args+=("$arg") ;;
    esac
  done
  set -- "${args[@]}"  # Reset positional parameters

  # Ensure at least one sub-command is provided
  [[ $1 ]] || { susops help; return 1; }
  local cmd=$1; shift

  # Helper: load or generate a random ephemeral port and persist it
  load_port() {
    local file="$1"
    if [[ -f "$file" ]]; then
      cat "$file"
    else
      # zsh always returns the same $RANDOM value in subshells
      # see https://github.com/bminor/bash/blob/f3a35a2d601a55f337f8ca02a541f8c033682247/variables.c#L1371
      # Workaround: read 2 bytes from /dev/random, convert to integer, map to dynamic port range
      local raw p
      raw=$(head -c2 /dev/random | od -An -tu2 | tr -d ' ')
      p=$(( raw % 16384 + 49152 ))
      echo "$p" > "$file"
      echo "$p"
    fi
  }

  # Load (or generate) SOCKS and PAC ports
  local socks_port pac_port
  socks_port=$(load_port "$socks_portfile")
  pac_port=$(load_port "$pac_portfile")

  # Create basic PAC file if missing
  [[ -f "$pacfile" ]] || cat > "$pacfile" << 'EOF'
function FindProxyForURL(url, host) {
  return "DIRECT";
}
EOF

  test_socks_domain() {
    local domain=$1 pid
    [[ -f $socks_pidfile ]] && pid=$(<"$socks_pidfile")
    if ! kill -0 "$pid" 2>/dev/null; then
      echo "→ SOCKS5 proxy not running; run 'susops start' first"
      return 1
    fi
    if $verbose; then
      printf "\n=== Testing SOCKS for %s ===\n" "$domain"
      curl -v --max-time 5 --proxy socks5h://127.0.0.1:"$socks_port" "https://$domain"
      echo
    else
      if curl -s --max-time 5 --proxy socks5h://127.0.0.1:"$socks_port" "https://$domain" >/dev/null 2>&1; then
        printf "✅ %s reachable via SOCKS\n" "$domain"
      else
        printf "❌ %s unreachable via SOCKS\n" "$domain"
      fi
    fi
  }

  test_remote_forwarding() {
    local target=$1 rp lp
    [[ -f $reverse_conf ]] || { echo "→ No remote ports configured"; return; }
    while read -r rp lp; do
      [[ -n $target && $rp != $target ]] && continue
      if $verbose; then
        printf "\n=== Testing remote port %s:%s -> localhost:%s ===\n" "$ssh_host" "$rp" "$lp"
        ssh -n "$ssh_host" curl -I -v --max-time 5 "http://localhost:$rp"
        echo
      else
        if ssh -n "$ssh_host" curl -I -s --max-time 5 "http://localhost:$rp" >/dev/null 2>&1; then
          printf "✅ %s:%s -> localhost:%s\n" "$ssh_host" "$rp" "$lp"
        else
          printf "❌ %s:%s -> localhost:%s\n" "$ssh_host" "$rp" "$lp"
        fi
      fi
    done < "$reverse_conf"
  }

  # Dispatch sub-commands
  case $cmd in
    help|-h)
      cat << EOF
Usage: susops [-v|--verbose] COMMAND [ARGS]
Commands:
  add HOST                                  add hostname to PAC
  rm HOST                                   remove hostname from PAC
  radd REMOTE_PORT LOCAL_PORT               add reverse port forward
  rrm REMOTE_PORT                           remove reverse port forward
  restart                                   stop and start (preserves ports)
  start [ssh_host] [socks_port] [pac_port]  start proxy and PAC server
  stop                                      stop proxy and server
  ls                                        list PAC hosts and reverse forwards
  ps                                        show status, ports, and reverse forwards
  reset                                     remove all files and configs
  test --all|HOST|REMOTE_PORT               test connectivity
  chrome                                    launch Chrome with proxy
  chrome-proxy-settings                     open Chrome proxy settings
  firefox                                   launch Firefox with proxy
Options:
  -v, --verbose                             verbose output
EOF
      ;;

    add)
      local host=$1; [[ $host ]] || { echo "Usage: susops add HOST"; return 1; }
      if grep -q "host === \"$host\"" "$pacfile"; then
        echo "→ $host already in PAC"
      else
        awk -v h="$host" '/return "DIRECT"/ { \
          print "  if (host === \""h"\" || dnsDomainIs(host, \"."h"\")) return \"SOCKS5 127.0.0.1:'$socks_port'\";" }1' \
          "$pacfile" > "$workspace/tmp.pac" && mv "$workspace/tmp.pac" "$pacfile"
        echo "→ Added $host to PAC"
      fi
      susops test "$host"
      ;;

    rm)
      local host=$1; [[ $host ]] || { echo "Usage: susops rm HOST"; return 1; }
      sed -i '' "/host === \"$host\"/d" "$pacfile" && echo "→ Removed $host" || echo "→ Not found"
      ;;

    radd)
      local rport=$1 lp=$2; [[ $rport && $lp ]] || { echo "Usage: susops radd REMOTE_PORT LOCAL_PORT"; return 1; }
      mkdir -p "$workspace"
      if grep -q "^$rport " "$reverse_conf" 2>/dev/null; then
        echo "→ remote port $rport is already registered"
      else
        echo "$rport $lp" >> "$reverse_conf"
        echo "→ Registered reverse forward remote:$rport -> localhost:$lp"
        echo "→ Run 'susops restart' to apply"
      fi
      ;;

    rrm)
      local rport=$1; [[ $rport ]] || { echo "Usage: susops rrm REMOTE_PORT"; return 1; }
      if grep -q "^$rport " "$reverse_conf" 2>/dev/null; then
        sed -i '' "/^$rport /d" "$reverse_conf"
        echo "→ Removed reverse forward remote:$rport"
        echo "→ Run 'susops restart' to apply"
      else
        echo "→ No reverse forward for remote:$rport"
      fi
      ;;

    restart)
      susops stop
      susops start
      ;;

    start)
      local target=${1:-$ssh_host}
      [[ $2 ]] && socks_port=$2 && echo "$socks_port" > "$socks_portfile"
      [[ $3 ]] && pac_port=$3 && echo "$pac_port" > "$pac_portfile"

      # Only start SOCKS proxy if not already running
      if [[ -f "$socks_pidfile" ]] && kill -0 "$(<"$socks_pidfile")" 2>/dev/null; then
        echo "→ SOCKS5 proxy already running (PID $(<"$socks_pidfile"), port $socks_port)"
      else
        # Build reverse tunnel arguments
        local rev_args=()
        if [[ -f $reverse_conf ]]; then
          while read -r rp lp; do
            rev_args+=("-R" "${rp}:localhost:${lp}")
          done < "$reverse_conf"
        fi
        local ssh_cmd=(ssh -N -D "$socks_port" "${rev_args[@]}" "$target")
        if [[ "$verbose" == true ]]; then
          printf "→ Full SSH command: %s\n" "${ssh_cmd[*]}"
        fi
        nohup "${ssh_cmd[@]}" </dev/null >/dev/null 2>&1 &
        echo $! > "$socks_pidfile"
        echo "→ SOCKS5 proxy started (PID $(<"$socks_pidfile"), port $socks_port)"
      fi

      # Only start PAC server if not already running
      if [[ -f "$pac_pidfile" ]] && kill -0 "$(<"$pac_pidfile")" 2>/dev/null; then
        echo "→ PAC server already running (PID $(<"$pac_pidfile"), port $pac_port)"
      else
        sed -E -i '' "s#(SOCKS5 127\\.0\\.0\\.1:)[0-9]+#\\1$socks_port#g" "$pacfile"
        length=$(wc -c <"$pacfile")
        nohup bash -c "
          while true; do
            {
              printf 'HTTP/1.1 200 OK\r\n'
              printf 'Content-Type: application/x-ns-proxy-autoconfig\r\n'
              printf 'Content-Length: %s\r\n' \"$length\"
              printf 'Connection: close\r\n'
              printf '\r\n'
              cat \"$pacfile\"
            } | nc -l \"$pac_port\"
          done
        " </dev/null >/dev/null 2>&1 &
        echo $! > "$pac_pidfile"
        echo "→ PAC server started (PID $(<"$pac_pidfile"), port $pac_port)"
      fi
      ;;

    stop)
      stop_process "$socks_pidfile" "SOCKS5 proxy" "$socks_portfile"
      stop_process "$pac_pidfile" "PAC server" "$pac_portfile"
      susops ps
      ;;

    ls)
      echo "PAC hosts:"
      sed -n 's/.*host === "\([^"\]*\)".*/→ \1/p' "$pacfile" || echo "→ None"
      if [[ -f $reverse_conf ]]; then
        echo "Remote forwards:"
        while read -r rp lp; do
          echo "→ remote:$rp -> localhost:$lp"
        done < "$reverse_conf"
      fi
      ;;

    ps)
      if [[ -f "$socks_pidfile" ]] && kill -0 "$(<"$socks_pidfile")" 2>/dev/null; then
        echo "SOCKS5 proxy: running (PID $(<"$socks_pidfile"), port $socks_port)"
      else
        echo "SOCKS5 proxy: not running"
      fi
      if [[ -f "$pac_pidfile" ]] && kill -0 "$(<"$pac_pidfile")" 2>/dev/null; then
        echo "PAC server:   running (PID $(<"$pac_pidfile"), port $pac_port, URL http://localhost:$pac_port/susops.pac)"
      else
        echo "PAC server:   not running"
      fi
      ;;

    reset)
      susops stop
      rm -rf "$workspace"
      ;;

    test)
      [[ $1 ]] || { echo "Usage: susops test (--all|HOST|REMOTE_PORT)"; return 1; }
      if [[ $1 == --all ]]; then
        echo "PAC hosts:"
        sed -n 's/.*host === "\([^"]*\)".*/\1/p' "$pacfile" | while read -r d; do
          test_socks_domain "$d"
        done
        echo "Remote forwards:"
        test_remote_forwarding
      elif [[ $1 =~ ^[0-9]+$ ]]; then
        test_remote_forwarding "$1"
      else
        test_socks_domain "$1"
      fi
      ;;

    chrome)
      open -a "Google Chrome" --args --proxy-pac-url="http://localhost:$pac_port/susops.pac"
      ;;

    chrome-proxy-settings)
      open -a "Google Chrome" "chrome://net-internals/#proxy"
      ;;

    firefox)
      local PROFILE="$workspace/firefox_profile"
      mkdir -p "$PROFILE"
      printf 'user_pref("network.proxy.type", 2);
user_pref("network.proxy.autoconfig_url", "http://localhost:%s/susops.pac");
' "$pac_port" > "$PROFILE/user.js"
      open -a "Firefox" --args -profile "$PROFILE" -no-remote
      ;;

    *) susops help;;
  esac
}
